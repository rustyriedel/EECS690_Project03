/*
 * MPU9150AccelerometerManager_Task.c
 *
 *  Created on: Sep 22, 2016
 *      Author: tbarclay
 */

#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "inc/hw_ints.h"
#include "driverlib/debug.h"
#include "driverlib/gpio.h"
#include "driverlib/interrupt.h"
#include "driverlib/pin_map.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "utils/uartstdio.h"
#include "sensorlib/hw_mpu9150.h"
#include "sensorlib/hw_ak8975.h"
#include "sensorlib/i2cm_drv.h"
#include "sensorlib/ak8975.h"
#include "sensorlib/mpu9150.h"
#include "sensorlib/comp_dcm.h"


#include	"inc/hw_types.h"
#include	"inc/hw_uart.h"

#include	<stddef.h>
#include	<stdarg.h>
#include	<stdio.h>

#include	"Drivers/Processor_Initialization.h"
#include	"Drivers/uartstdio.h"

#include	"Tasks/Task_ReportData.h"

#include	"FreeRTOS.h"
#include	"task.h"

#include    "semphr.h"

#include	"MPU9150Manager.h"
#include 	"Tasks/Task_I2C7_Handler.h"


volatile bool MPU9150TaskDone;
//volatile bool MPU9150InitDone = false;
extern bool isMPU9150Initialized;
float accel_x, accel_y, accel_z = 0;

void AccelerometerCallback(void *, uint_fast8_t);

void Accelerometer_Initialize()
{
	if (!isMPU9150Initialized){
		// Initialize I2C
		I2C7_Initialization();

		// If MPU-9150 is already initialized, don't try initializing again

		// non blocking initialization function for MPU-9150 chip
		MPU9150Init(&MPU9150Inst,
					I2C7_Instance_Ref,
					0x68,
					AccelerometerCallback,
					0);

		// wait for callback
		while(!MPU9150TaskDone);

		MPU9150TaskDone = false;

		// Configure the accelerometer part of the MPU-9150 to use +-4g granularity
		MPU9150ReadModifyWrite( &MPU9150Inst,
								MPU9150_O_ACCEL_CONFIG,
								~MPU9150_ACCEL_CONFIG_AFS_SEL_M,
								MPU9150_ACCEL_CONFIG_AFS_SEL_4G,
								AccelerometerCallback,
								0);

		while(!MPU9150TaskDone);

		//set the MPU9150 initialization flag to true
		isMPU9150Initialized = true;
	}
}

void AccelerometerCallback(void *pvData, uint_fast8_t ui8Status)
{

	// Check if an error occurred.
	if(ui8Status != I2CM_STATUS_SUCCESS)
	{
		UARTprintf("error");
	}
	// signal that the task has been completed and that spin locks should end
	MPU9150TaskDone = true;
}

void getAcceleration( float *accelX, float *accelY, float *accelZ)
{
	// Initialization is finished and thus the most recent acceleration data should be given
	if(isMPU9150Initialized == true)
	{
		MPU9150DataAccelGetFloat(&MPU9150Inst,
							  	  accelX,
								  accelY,
								  accelZ);
	}

	// Initialization is not finished and there is no acceleration data to get
	else
	{
		*(accelX)=0;
		*(accelY)=0;
		*(accelZ)=0;
	}

}

void Task_Accelerometer(void *pvParameters)
{
	Accelerometer_Initialize();

	while(1)
	{
		MPU9150TaskDone = false;
		// read from the MPU-9150
		MPU9150DataRead(&MPU9150Inst, AccelerometerCallback, 0);
		while(!MPU9150TaskDone){}
		//getAcceleration(accel_x, accel_y, accel_z);

		// wait for 100 ms
		vTaskDelay(100);
	}
}

void Task_AccRead( void *pvParameters)
{
	ReportData_Item		theAccelReport;

	float xaccel, yaccel, zaccel;

	while ( 1 ) {
		xaccel = 1;
		yaccel = 1;
		zaccel = 1;
		//getAcceleration(&xaccel, &yaccel, &zaccel);
		MPU9150DataAccelGetFloat(&MPU9150Inst,
									  	  accelX,
										  accelY,
										  accelZ);
		theAccelReport.TimeStamp = xPortSysTickCount;
		theAccelReport.ReportName = 9999;
		theAccelReport.ReportValue_0 = (int)(xaccel*100);
		theAccelReport.ReportValue_1 = (int)(yaccel*100);
		theAccelReport.ReportValue_2 = (int)(zaccel*100);
		theAccelReport.ReportValue_3 = 0;

		xQueueSend(  ReportData_Queue, &theAccelReport, 0 );

		vTaskDelay( 2 * configTICK_RATE_HZ );
	}
}
